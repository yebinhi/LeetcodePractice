{"id":37304160,"question_id":170,"lang":"java","lang_name":"Java","time":"8 years, 8 months","timestamp":1440340050,"status":10,"status_display":"Accepted","runtime":"988 ms","url":"/submissions/detail/37304160/","is_pending":"Not Pending","title":"Two Sum III - Data structure design","memory":"N/A","code":"public class TwoSum {\r\n    \r\n    List<Integer> numbers = new ArrayList<Integer>();\r\n    AVL avl = new AVL();\r\n\r\n\tpublic void add(int number) {\r\n\t    numbers.add(number);\r\n\t    avl.add(number);\r\n\t}\r\n\r\n\tpublic boolean find(int value) {\r\n\t    for(int x : numbers){\r\n\t        int y = value - x;\r\n\t        Node node = avl.find(y);\r\n\t        if(node == null){\r\n\t            continue;\r\n\t        }\r\n\t        if(x == y && node.count == 1){\r\n\t            continue;\r\n\t        }\r\n\t        return true;\r\n\t    }\r\n\t    return false;\r\n\t}\r\n\t\r\n}\r\n\r\nclass AVL {\r\n    Node root;\r\n\r\n    private int height(Node root) {\r\n        if (root == null) {\r\n            return -1;\r\n        } else {\r\n            return root.height;\r\n        }\r\n    }\r\n\r\n    private Node insert(Node root, int value) {\r\n        if (root == null) {\r\n            root = new Node(value);\r\n        } else if (root.value == value) {\r\n            root.count += 1;\r\n        } else if (root.value < value) {\r\n            //go right;\r\n            root.right = insert(root.right, value);\r\n            if (height(root.right) - height(root.left) == 2) {\r\n                if (value > root.right.value) {\r\n                    root = singleRotateWithRight(root);\r\n                } else {\r\n                    root = doubleRotateWithRight(root);\r\n                }\r\n            }\r\n        } else {\r\n            //go left;\r\n            root.left = insert(root.left, value);\r\n            if (height(root.left) - height(root.right) == 2) {\r\n                if (value < root.left.value) {\r\n                    root = singleRotateWithLeft(root);\r\n                } else {\r\n                    root = doubleRotateWithLeft(root);\r\n                }\r\n            }\r\n        }\r\n\r\n        root.height = Math.max(height(root.left), height(root.right)) + 1;\r\n        return root;\r\n    }\r\n\r\n    private Node doubleRotateWithRight(Node k3) {\r\n        k3.right = singleRotateWithLeft(k3.right);\r\n        return singleRotateWithRight(k3);\r\n    }\r\n\r\n    private Node singleRotateWithRight(Node k2) {\r\n        Node k1 = k2.right;\r\n        k2.right = k1.left;\r\n        k1.left = k2;\r\n\r\n        k2.height = Math.max(height(k2.left), height(k2.right)) + 1;\r\n        k1.height = Math.max(height(k1.left), height(k1.right)) + 1;\r\n\r\n        return k1;\r\n    }\r\n\r\n    private Node doubleRotateWithLeft(Node k3) {\r\n        k3.left = singleRotateWithRight(k3.left);\r\n        return singleRotateWithLeft(k3);\r\n    }\r\n\r\n    private Node singleRotateWithLeft(Node k2) {\r\n        Node k1 = k2.left;\r\n        k2.left = k1.right;\r\n        k1.right = k2;\r\n\r\n        k2.height = Math.max(height(k2.left), height(k2.right)) + 1;\r\n        k1.height = Math.max(height(k1.left), height(k1.right)) + 1;\r\n        return k1;\r\n    }\r\n\r\n    public void add(int value) {\r\n        root = insert(root, value);\r\n    }\r\n\r\n    private Node find(Node root, int value) {\r\n        if (root == null) {\r\n            return null;\r\n        }\r\n\r\n        if (root.value == value && root.count == 0) {\r\n            return null;\r\n        }\r\n\r\n        if (root.value == value) {\r\n            return root;\r\n        }\r\n\r\n        if (value > root.value) {\r\n            return find(root.right, value);\r\n        } else {\r\n            return find(root.left, value);\r\n        }\r\n    }\r\n\r\n    public Node find(int value) {\r\n        return find(root, value);\r\n    }\r\n\r\n    public Node getRoot() {\r\n        return root;\r\n    }\r\n}\r\n\r\nclass Node {\r\n    final int value;\r\n    int count, height;\r\n    Node left, right;\r\n\r\n    Node(int value) {\r\n        this.value = value;\r\n        count = 1;\r\n        height = 0;\r\n    }\r\n}","compare_result":null,"title_slug":"two-sum-iii-data-structure-design","has_notes":false,"flag_type":1}