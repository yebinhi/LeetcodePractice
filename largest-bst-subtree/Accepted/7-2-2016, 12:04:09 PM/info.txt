{"id":65929802,"question_id":333,"lang":"cpp","lang_name":"C++","time":"7 years, 9 months","timestamp":1467457449,"status":10,"status_display":"Accepted","runtime":"12 ms","url":"/submissions/detail/65929802/","is_pending":"Not Pending","title":"Largest BST Subtree","memory":"N/A","code":"/**\r\n * Definition for a binary tree node.\r\n * struct TreeNode {\r\n *     int val;\r\n *     TreeNode *left;\r\n *     TreeNode *right;\r\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\r\n * };\r\n */\r\nclass Solution {\r\npublic:\r\n    int largestBSTSubtree(TreeNode* root) {\r\n        int res=0;\r\n        dfs(root, res);\r\n        return res;\r\n    }\r\n    void dfs(TreeNode* node, int &res){\r\n        if(!node) return;\r\n        int d=countBST(node, INT_MIN, INT_MAX);\r\n        if(d!=-1){\r\n            res=max(res, d);\r\n            return;\r\n        }\r\n        \r\n        dfs(node->left, res);\r\n        dfs(node->right, res);\r\n    }\r\n    \r\n    int countBST(TreeNode* node, int min, int max){\r\n        if(!node) return 0;\r\n        if(node->val <min || node->val >max) return -1;\r\n        int left = countBST(node->left, min, node->val);\r\n        if(left == -1) return -1;\r\n        int right=countBST(node->right, node->val, max);\r\n        if(right==-1) return -1;\r\n        return left+right+1;\r\n        \r\n    }\r\n};","compare_result":null,"title_slug":"largest-bst-subtree","has_notes":false,"flag_type":1}