{"id":35708869,"question_id":173,"lang":"java","lang_name":"Java","time":"8 years, 8 months","timestamp":1439079689,"status":10,"status_display":"Accepted","runtime":"388 ms","url":"/submissions/detail/35708869/","is_pending":"Not Pending","title":"Binary Search Tree Iterator","memory":"N/A","code":"/**\r\n * Definition for binary tree\r\n * public class TreeNode {\r\n *     int val;\r\n *     TreeNode left;\r\n *     TreeNode right;\r\n *     TreeNode(int x) { val = x; }\r\n * }\r\n */\r\n\r\npublic class BSTIterator {\r\n    \r\n  private List<TreeNode> list;\r\n\r\npublic BSTIterator(TreeNode root) {\r\n    list = new ArrayList<TreeNode>();\r\n    TreeNode p = root;\r\n    while(p!= null){\r\n        list.add(p);\r\n        p = p.left;\r\n    }\r\n}\r\n\r\n/** @return whether we have a next smallest number */\r\npublic boolean hasNext() {\r\n    return !list.isEmpty();\r\n}\r\n\r\n/** @return the next smallest number */\r\npublic int next() {\r\n    TreeNode p = list.remove(list.size()-1);\r\n    TreeNode q = p.right;\r\n    while(q != null){\r\n        list.add(q);\r\n        q = q.left;\r\n    }\r\n    return p.val;\r\n}\r\n}\r\n\r\n/**\r\n * Your BSTIterator will be called like this:\r\n * BSTIterator i = new BSTIterator(root);\r\n * while (i.hasNext()) v[f()] = i.next();\r\n */","compare_result":null,"title_slug":"binary-search-tree-iterator","has_notes":false,"flag_type":1}