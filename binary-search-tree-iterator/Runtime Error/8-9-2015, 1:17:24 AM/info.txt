{"id":35708631,"question_id":173,"lang":"java","lang_name":"Java","time":"8 years, 8 months","timestamp":1439079444,"status":15,"status_display":"Runtime Error","runtime":"N/A","url":"/submissions/detail/35708631/","is_pending":"Not Pending","title":"Binary Search Tree Iterator","memory":"N/A","code":"/**\r\n * Definition for binary tree\r\n * public class TreeNode {\r\n *     int val;\r\n *     TreeNode left;\r\n *     TreeNode right;\r\n *     TreeNode(int x) { val = x; }\r\n * }\r\n */\r\n\r\npublic class BSTIterator {\r\n    \r\n    Stack<TreeNode> stack = new Stack<TreeNode>();\r\n    \r\n    public BSTIterator(TreeNode root) {\r\n        TreeNode Node = root;\r\n        while(Node != null){\r\n            stack.push(Node);\r\n            Node = root.left;\r\n        }\r\n    }\r\n\r\n    /** @return whether we have a next smallest number */\r\n    public boolean hasNext() {\r\n        return stack.isEmpty();\r\n    }\r\n\r\n    /** @return the next smallest number */\r\n    public int next() {\r\n        TreeNode p = stack.pop();\r\n        TreeNode q = p.right;\r\n        while(q != null){\r\n            stack.push(q);\r\n            q= q.left;\r\n        }\r\n        return p.val;\r\n    }\r\n}\r\n\r\n/**\r\n * Your BSTIterator will be called like this:\r\n * BSTIterator i = new BSTIterator(root);\r\n * while (i.hasNext()) v[f()] = i.next();\r\n */","compare_result":null,"title_slug":"binary-search-tree-iterator","has_notes":false,"flag_type":1}