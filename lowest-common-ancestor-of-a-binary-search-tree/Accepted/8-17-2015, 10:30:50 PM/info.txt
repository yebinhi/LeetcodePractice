{"id":36656424,"question_id":235,"lang":"java","lang_name":"Java","time":"8 years, 8 months","timestamp":1439847050,"status":10,"status_display":"Accepted","runtime":"496 ms","url":"/submissions/detail/36656424/","is_pending":"Not Pending","title":"Lowest Common Ancestor of a Binary Search Tree","memory":"N/A","code":"/**\r\n * Definition for a binary tree node.\r\n * public class TreeNode {\r\n *     int val;\r\n *     TreeNode left;\r\n *     TreeNode right;\r\n *     TreeNode(int x) { val = x; }\r\n * }\r\n */\r\npublic class Solution {\r\n    public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {\r\n        if(root == null) return null;\r\n        TreeNode m = root;\r\n        if(m.val >p.val && m.val >q.val){\r\n            return lowestCommonAncestor(root.left, p, q);\r\n        }else if(m.val < p.val && m.val <q.val){\r\n            return lowestCommonAncestor(root.right, p, q);\r\n        }\r\n        return root;\r\n    }\r\n    \r\n   \r\n}","compare_result":null,"title_slug":"lowest-common-ancestor-of-a-binary-search-tree","has_notes":false,"flag_type":1}