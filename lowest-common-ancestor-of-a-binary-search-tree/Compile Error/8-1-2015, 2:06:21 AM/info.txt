{"id":34870481,"question_id":235,"lang":"java","lang_name":"Java","time":"8 years, 8 months","timestamp":1438391181,"status":20,"status_display":"Compile Error","runtime":"N/A","url":"/submissions/detail/34870481/","is_pending":"Not Pending","title":"Lowest Common Ancestor of a Binary Search Tree","memory":"N/A","code":"/**\r\n * Definition for a binary tree node.\r\n * public class TreeNode {\r\n *     int val;\r\n *     TreeNode left;\r\n *     TreeNode right;\r\n *     TreeNode(int x) { val = x; }\r\n * }\r\n */\r\npublic class Solution {\r\n    public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {\r\n       if(root == null){\r\n           return null;\r\n       } \r\n       if(root == p || root == q){\r\n           return root;\r\n       }\r\n       TreeNode left = lowestCommonAncestor(root.left, p, q);\r\n       TreeNode right = lowestComonAncestor(root.right, p, q);\r\n       if(left != null && right != null){\r\n           return root;\r\n       }\r\n       \r\n       return (left != null) ? left : right;\r\n    }\r\n    \r\n   \r\n}","compare_result":null,"title_slug":"lowest-common-ancestor-of-a-binary-search-tree","has_notes":false,"flag_type":1}