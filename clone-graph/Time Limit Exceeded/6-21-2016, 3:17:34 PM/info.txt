{"id":64911491,"question_id":133,"lang":"cpp","lang_name":"C++","time":"7 years, 10 months","timestamp":1466518654,"status":14,"status_display":"Time Limit Exceeded","runtime":"N/A","url":"/submissions/detail/64911491/","is_pending":"Not Pending","title":"Clone Graph","memory":"N/A","code":"/**\r\n * Definition for undirected graph.\r\n * struct UndirectedGraphNode {\r\n *     int label;\r\n *     vector<UndirectedGraphNode *> neighbors;\r\n *     UndirectedGraphNode(int x) : label(x) {};\r\n * };\r\n */\r\nclass Solution {\r\npublic:\r\n    UndirectedGraphNode *cloneGraph(UndirectedGraphNode *node) {\r\n        if(node == NULL) return NULL;\r\n        \r\n        map<UndirectedGraphNode*, UndirectedGraphNode*> mymap;\r\n        queue<UndirectedGraphNode*> myqueue;\r\n        UndirectedGraphNode* nodecopy = new UndirectedGraphNode(node->label);\r\n        mymap[node]=nodecopy;\r\n        myqueue.push(node);\r\n        while(!myqueue.empty()){\r\n            UndirectedGraphNode* n = myqueue.front();\r\n            \r\n            for(auto x : n->neighbors){\r\n                if(mymap.find(x) != mymap.end()){\r\n                    mymap[n]->neighbors.push_back(mymap[x]);\r\n                }else{\r\n                    UndirectedGraphNode* newneighbor = new UndirectedGraphNode(x->label);\r\n                    mymap[n]->neighbors.push_back(newneighbor);\r\n                    mymap[x]=newneighbor;\r\n                    myqueue.push(x);\r\n                }\r\n            }\r\n            \r\n        }\r\n        return nodecopy;\r\n    }\r\n};","compare_result":null,"title_slug":"clone-graph","has_notes":false,"flag_type":1}