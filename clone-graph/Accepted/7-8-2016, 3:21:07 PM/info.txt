{"id":66523219,"question_id":133,"lang":"cpp","lang_name":"C++","time":"7 years, 9 months","timestamp":1467987667,"status":10,"status_display":"Accepted","runtime":"84 ms","url":"/submissions/detail/66523219/","is_pending":"Not Pending","title":"Clone Graph","memory":"N/A","code":"/**\r\n * Definition for undirected graph.\r\n * struct UndirectedGraphNode {\r\n *     int label;\r\n *     vector<UndirectedGraphNode *> neighbors;\r\n *     UndirectedGraphNode(int x) : label(x) {};\r\n * };\r\n */\r\nclass Solution {\r\npublic:\r\n    UndirectedGraphNode *cloneGraph(UndirectedGraphNode *node) {\r\n        if(!node) return NULL;\r\n        \r\n        map<UndirectedGraphNode*, UndirectedGraphNode*> m;\r\n        queue<UndirectedGraphNode*> q;\r\n        q.push(node);\r\n        UndirectedGraphNode* nodecopy = new UndirectedGraphNode(node->label);\r\n        m[node]=nodecopy;\r\n        while(!q.empty()){\r\n            UndirectedGraphNode * cur=q.front(); q.pop();\r\n            for(auto nei : cur->neighbors){\r\n                if(m.find(nei) != m.end()){\r\n                    m[cur]->neighbors.push_back(m[nei]);\r\n                }else{\r\n                    UndirectedGraphNode * neicopy= new UndirectedGraphNode(nei->label);\r\n                    m[cur]->neighbors.push_back(neicopy);\r\n                    m[nei]=neicopy;\r\n                    q.push(nei);\r\n                }\r\n            }\r\n        }\r\n        return nodecopy;\r\n    }\r\n};","compare_result":null,"title_slug":"clone-graph","has_notes":false,"flag_type":1}