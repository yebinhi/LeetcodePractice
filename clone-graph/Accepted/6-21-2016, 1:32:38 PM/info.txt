{"id":64905148,"question_id":133,"lang":"cpp","lang_name":"C++","time":"7 years, 10 months","timestamp":1466512358,"status":10,"status_display":"Accepted","runtime":"85 ms","url":"/submissions/detail/64905148/","is_pending":"Not Pending","title":"Clone Graph","memory":"N/A","code":"/**\r\n * Definition for undirected graph.\r\n * struct UndirectedGraphNode {\r\n *     int label;\r\n *     vector<UndirectedGraphNode *> neighbors;\r\n *     UndirectedGraphNode(int x) : label(x) {};\r\n * };\r\n */\r\nclass Solution {\r\npublic:\r\n    UndirectedGraphNode *cloneGraph(UndirectedGraphNode *node) {\r\n        if(node == NULL) return NULL;\r\n        map<int,UndirectedGraphNode*> visitTable;\r\n        return clone(node,visitTable);\r\n    }\r\n    UndirectedGraphNode* clone(UndirectedGraphNode* node, map<int,UndirectedGraphNode*> &table){\r\n\r\n            \r\n        if(table.find(node->label)!=table.end()) return table[node->label];\r\n        \r\n        UndirectedGraphNode *newnode=new UndirectedGraphNode(node->label);\r\n        table[newnode->label]=newnode;\r\n\r\n        for(int i=0;i<node->neighbors.size();i++)\r\n        {\r\n            UndirectedGraphNode *neighbor=clone(node->neighbors[i],table);\r\n            newnode->neighbors.push_back(neighbor);\r\n        }\r\n        \r\n        return newnode;\r\n    }\r\n};","compare_result":null,"title_slug":"clone-graph","has_notes":false,"flag_type":1}