{"id":65807936,"question_id":133,"lang":"cpp","lang_name":"C++","time":"7 years, 10 months","timestamp":1467329069,"status":10,"status_display":"Accepted","runtime":"89 ms","url":"/submissions/detail/65807936/","is_pending":"Not Pending","title":"Clone Graph","memory":"N/A","code":"/**\r\n * Definition for undirected graph.\r\n * struct UndirectedGraphNode {\r\n *     int label;\r\n *     vector<UndirectedGraphNode *> neighbors;\r\n *     UndirectedGraphNode(int x) : label(x) {};\r\n * };\r\n */\r\nclass Solution {\r\npublic:\r\n    UndirectedGraphNode *cloneGraph(UndirectedGraphNode *node) {\r\n        if(!node) return node;\r\n        map<UndirectedGraphNode*, UndirectedGraphNode*> m;\r\n        return dfs(node, m);\r\n    }\r\n    UndirectedGraphNode* dfs(UndirectedGraphNode* n, map<UndirectedGraphNode*, UndirectedGraphNode*>& m){\r\n        if(m.find(n) != m.end()) return m[n];\r\n        UndirectedGraphNode* ncpy = new UndirectedGraphNode(n->label);\r\n        m[n]=ncpy;\r\n        for(auto nb : n->neighbors){\r\n            ncpy->neighbors.push_back(dfs(nb, m));\r\n        }\r\n        return ncpy;\r\n    }\r\n};","compare_result":null,"title_slug":"clone-graph","has_notes":false,"flag_type":1}