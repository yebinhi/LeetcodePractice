{"id":44282964,"question_id":133,"lang":"cpp","lang_name":"C++","time":"8 years, 6 months","timestamp":1445991022,"status":10,"status_display":"Accepted","runtime":"76 ms","url":"/submissions/detail/44282964/","is_pending":"Not Pending","title":"Clone Graph","memory":"N/A","code":"/**\r\n * Definition for undirected graph.\r\n * struct UndirectedGraphNode {\r\n *     int label;\r\n *     vector<UndirectedGraphNode *> neighbors;\r\n *     UndirectedGraphNode(int x) : label(x) {};\r\n * };\r\n */\r\nclass Solution {\r\npublic:\r\n    UndirectedGraphNode *cloneGraph(UndirectedGraphNode *node) {\r\n        if(node == NULL) return NULL;\r\n        unordered_map<UndirectedGraphNode*, UndirectedGraphNode*> map;\r\n        map[node] = new UndirectedGraphNode(node->label);\r\n        queue<UndirectedGraphNode*> q;\r\n        q.push(node);\r\n        while(!q.empty()){\r\n            UndirectedGraphNode* temp = q.front();\r\n            q.pop();\r\n            for(int i=0; i<temp->neighbors.size(); i++){\r\n                if(map.find(temp->neighbors[i]) == map.end()){\r\n                    map[temp->neighbors[i]]=new UndirectedGraphNode(temp->neighbors[i]->label);\r\n                    q.push(temp->neighbors[i]);\r\n                }\r\n                (map[temp]->neighbors).push_back(map[temp->neighbors[i]]);\r\n            }\r\n        }\r\n        return map[node];\r\n    }\r\n};","compare_result":null,"title_slug":"clone-graph","has_notes":false,"flag_type":1}