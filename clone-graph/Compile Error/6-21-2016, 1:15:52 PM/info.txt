{"id":64904319,"question_id":133,"lang":"cpp","lang_name":"C++","time":"7 years, 10 months","timestamp":1466511352,"status":20,"status_display":"Compile Error","runtime":"N/A","url":"/submissions/detail/64904319/","is_pending":"Not Pending","title":"Clone Graph","memory":"N/A","code":"/**\r\n * Definition for undirected graph.\r\n * struct UndirectedGraphNode {\r\n *     int label;\r\n *     vector<UndirectedGraphNode *> neighbors;\r\n *     UndirectedGraphNode(int x) : label(x) {};\r\n * };\r\n */\r\nclass Solution {\r\npublic:\r\n    UndirectedGraphNode *cloneGraph(UndirectedGraphNode *node) {\r\n        if(node == NULL) return NULL;\r\n        \r\n        map<UndirectedGraphNode*, UndirectedGraphNode*> mymap;\r\n        return DFS(node, mymap);\r\n    }\r\n    UndirectedGraphNode* DFS(UndirectedGraphNode* node, map<UndirectedGraphNode*, UndirectedGraphNode*> mymap){\r\n        if(mymap.find(node) != mymap.end()){ return mymap[node];}\r\n        \r\n        UndirectedGraphNode* nodecopy = new UndirectedGraphNode(node->label);\r\n        mymap.insert(node, nodecopy);\r\n        \r\n        for(auto x : node->neighbors){\r\n            nodecopy->neighbors.push_back(DFS(x, mymap));\r\n        }\r\n        return nodecopy;\r\n    }\r\n};","compare_result":null,"title_slug":"clone-graph","has_notes":false,"flag_type":1}