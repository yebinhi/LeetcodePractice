{"id":35706957,"question_id":208,"lang":"java","lang_name":"Java","time":"8 years, 8 months","timestamp":1439077847,"status":20,"status_display":"Compile Error","runtime":"N/A","url":"/submissions/detail/35706957/","is_pending":"Not Pending","title":"Implement Trie (Prefix Tree)","memory":"N/A","code":"class TrieNode {\r\n    // Initialize your data structure here.\r\n    Character c;\r\n    HashMap<Character, TrieNode> children = new HashMap<Character, TrieNode>();\r\n    boolean isLeaf;\r\n        \r\n    public TrieNode(){\r\n    }\r\n    public TrieNode(Character c){\r\n            this.c = c;\r\n    }\r\n}\r\n\r\npublic class Trie {\r\n    private TrieNode root;\r\n\r\n    public Trie() {\r\n        root = new TrieNode();\r\n    }\r\n\r\n    // Inserts a word into the trie.\r\n    public void insert(String word) {\r\n        HashMap<Character, TrieNode> children = root.children;\r\n        \r\n        for(int i =0; i<word.length();i++){\r\n            Character c = word.charAt(i);\r\n            TrieNode current;\r\n            if(children.containskey(c)){\r\n                current = children.get(c);\r\n            }else{\r\n                current = new TrieNode(c);\r\n                children.put(c, t);\r\n            }\r\n            children = current.children;\r\n            \r\n            if(i == word.length()-1){\r\n                isLeaf == true;\r\n            }\r\n        }\r\n    }\r\n\r\n    // Returns if the word is in the trie.\r\n    public boolean search(String word) {\r\n        TrieNode last = searchNode(word);\r\n        if(last != null && last.isLeaf == true){\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    // Returns if there is any word in the trie\r\n    // that starts with the given prefix.\r\n    public boolean startsWith(String prefix) {\r\n        TrieNode last = searchNode(word);\r\n        if(last != null){\r\n            return true;\r\n        }else{\r\n            return false;\r\n        }\r\n    }\r\n    \r\n    public TrieNode searchNode(String word){\r\n        int len = word.length();\r\n        HashMap<Character, TrieNode> children = root.children;\r\n        TrieNode t;\r\n        for(int i =0; i< len; i++){\r\n            char c = word.charAt(i);\r\n            if(children.chontainsKey(c)){\r\n                t = children.get(c);\r\n                children = t.children;\r\n            }else{\r\n                return null;\r\n            }\r\n        }\r\n        return t;\r\n    }\r\n}\r\n\r\n// Your Trie object will be instantiated and called as such:\r\n// Trie trie = new Trie();\r\n// trie.insert(\"somestring\");\r\n// trie.search(\"key\");","compare_result":null,"title_slug":"implement-trie-prefix-tree","has_notes":false,"flag_type":1}