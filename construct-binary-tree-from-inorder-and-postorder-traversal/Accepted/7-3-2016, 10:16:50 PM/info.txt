{"id":66039927,"question_id":106,"lang":"cpp","lang_name":"C++","time":"7 years, 9 months","timestamp":1467580610,"status":10,"status_display":"Accepted","runtime":"56 ms","url":"/submissions/detail/66039927/","is_pending":"Not Pending","title":"Construct Binary Tree from Inorder and Postorder Traversal","memory":"N/A","code":"/**\r\n * Definition for a binary tree node.\r\n * struct TreeNode {\r\n *     int val;\r\n *     TreeNode *left;\r\n *     TreeNode *right;\r\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\r\n * };\r\n */\r\nclass Solution {\r\npublic:\r\n    typedef vector<int>::iterator Iter;\r\n    TreeNode* buildTree(vector<int>& inorder, vector<int>& postorder) {\r\n        return buildTreeRecur(inorder.begin(), inorder.end(), postorder.begin(), postorder.end());\r\n    }\r\n    \r\n    TreeNode* buildTreeRecur(Iter istart, Iter iend, Iter pstart, Iter pend){\r\n        \r\n        if(istart == iend) return NULL;\r\n        int rootval=*(pend-1);\r\n        Iter iterroot=find(istart, iend, rootval);\r\n        TreeNode *res= new TreeNode(rootval);\r\n        res->left=buildTreeRecur(istart, iterroot, pstart, pstart+(iterroot-istart));\r\n        res->right=buildTreeRecur(iterroot+1, iend, pstart+(iterroot-istart), pend-1);\r\n        return res;\r\n    }\r\n};","compare_result":null,"title_slug":"construct-binary-tree-from-inorder-and-postorder-traversal","has_notes":false,"flag_type":1}