{"id":66040870,"question_id":106,"lang":"cpp","lang_name":"C++","time":"7 years, 9 months","timestamp":1467581377,"status":10,"status_display":"Accepted","runtime":"56 ms","url":"/submissions/detail/66040870/","is_pending":"Not Pending","title":"Construct Binary Tree from Inorder and Postorder Traversal","memory":"N/A","code":"/**\r\n * Definition for a binary tree node.\r\n * struct TreeNode {\r\n *     int val;\r\n *     TreeNode *left;\r\n *     TreeNode *right;\r\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\r\n * };\r\n */\r\nclass Solution {\r\npublic:\r\n    typedef vector<int>::iterator iter;\r\n    TreeNode* buildTree(vector<int>& inorder, vector<int>& postorder) {\r\n        return buildTree(inorder.begin(), inorder.end(), \r\n                         postorder.begin(), postorder.end());\r\n    }\r\n    TreeNode* buildTree(iter is, iter ie, iter ps, iter pe){\r\n        if(is>=ie) return NULL;\r\n        int rootval=*(pe-1);\r\n        iter iterroot = find(is, ie, rootval);\r\n        TreeNode* res=new TreeNode(rootval);\r\n        res->left=buildTree(is, iterroot, ps, ps+(iterroot-is));\r\n        res->right=buildTree(iterroot+1, ie, ps+(iterroot-is), pe-1);\r\n        return res;\r\n    }\r\n};","compare_result":null,"title_slug":"construct-binary-tree-from-inorder-and-postorder-traversal","has_notes":false,"flag_type":1}