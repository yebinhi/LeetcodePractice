{"id":35711031,"question_id":166,"lang":"java","lang_name":"Java","time":"8 years, 8 months","timestamp":1439081796,"status":10,"status_display":"Accepted","runtime":"208 ms","url":"/submissions/detail/35711031/","is_pending":"Not Pending","title":"Fraction to Recurring Decimal","memory":"N/A","code":"public class Solution {\r\n    public String fractionToDecimal(int numerator, int denominator) {\r\n        if (numerator == 0)\r\n\t\treturn \"0\";\r\n\tif (denominator == 0)\r\n\t\treturn \"\";\r\n \r\n\tString result = \"\";\r\n \r\n\t// is result is negative\r\n\tif ((numerator < 0) ^ (denominator < 0)) {\r\n\t\tresult += \"-\";\r\n\t}\r\n \r\n\t// convert int to long\r\n\tlong num = numerator, den = denominator;\r\n\tnum = Math.abs(num);\r\n\tden = Math.abs(den);\r\n \r\n\t// quotient \r\n\tlong res = num / den;\r\n\tresult += String.valueOf(res);\r\n \r\n\t// if remainder is 0, return result\r\n\tlong remainder = (num % den) * 10;\r\n\tif (remainder == 0)\r\n\t\treturn result;\r\n \r\n\t// right-hand side of decimal point\r\n\tHashMap<Long, Integer> map = new HashMap<Long, Integer>();\r\n\tresult += \".\";\r\n\twhile (remainder != 0) {\r\n\t\t// if digits repeat\r\n\t\tif (map.containsKey(remainder)) {\r\n\t\t\tint beg = map.get(remainder); \r\n\t\t\tString part1 = result.substring(0, beg);\r\n\t\t\tString part2 = result.substring(beg, result.length());\r\n\t\t\tresult = part1 + \"(\" + part2 + \")\";\r\n\t\t\treturn result;\r\n\t\t}\r\n \r\n\t\t// continue\r\n\t\tmap.put(remainder, result.length());\r\n\t\tres = remainder / den;\r\n\t\tresult += String.valueOf(res);\r\n\t\tremainder = (remainder % den) * 10;\r\n\t}\r\n \r\n\treturn result;\r\n    }\r\n}","compare_result":null,"title_slug":"fraction-to-recurring-decimal","has_notes":false,"flag_type":1}