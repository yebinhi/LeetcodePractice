{"id":66021031,"question_id":56,"lang":"cpp","lang_name":"C++","time":"7 years, 9 months","timestamp":1467560954,"status":10,"status_display":"Accepted","runtime":"21 ms","url":"/submissions/detail/66021031/","is_pending":"Not Pending","title":"Merge Intervals","memory":"N/A","code":"/**\r\n * Definition for an interval.\r\n * struct Interval {\r\n *     int start;\r\n *     int end;\r\n *     Interval() : start(0), end(0) {}\r\n *     Interval(int s, int e) : start(s), end(e) {}\r\n * };\r\n */\r\nclass Solution {\r\npublic:\r\n    struct compInterval{\r\n        bool operator()(const Interval& a, const Interval& b) {\r\n            return a.start<b.start;\r\n        }\r\n    };\r\n\r\n    vector<Interval> merge(vector<Interval>& intervals) {\r\n        vector<Interval> res;\r\n       int n=intervals.size();\r\n       if(n<=0) return res;\r\n       \r\n       sort(intervals.begin(), intervals.end(), compInterval());\r\n       for(int i=0; i<n; i++){\r\n           if(res.empty() || res.back().end < intervals[i].start)\r\n               res.push_back(intervals[i]);\r\n           else\r\n               res.back().end=max(res.back().end, intervals[i].end);\r\n       }\r\n       return res;\r\n    }\r\n};","compare_result":null,"title_slug":"merge-intervals","has_notes":false,"flag_type":1}