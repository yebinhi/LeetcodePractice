{"id":35377989,"question_id":110,"lang":"java","lang_name":"Java","time":"8 years, 8 months","timestamp":1438792766,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/35377989/","is_pending":"Not Pending","title":"Balanced Binary Tree","memory":"N/A","code":"/**\r\n * Definition for a binary tree node.\r\n * public class TreeNode {\r\n *     int val;\r\n *     TreeNode left;\r\n *     TreeNode right;\r\n *     TreeNode(int x) { val = x; }\r\n * }\r\n */\r\npublic class Solution {\r\n    public boolean isBalanced(TreeNode root) {\r\n        if(root == null){\r\n            return true;\r\n        }\r\n        if(Math.abs(maxDepth(root.left) - minDepth(root.right)) > 1){\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n    \r\n    public int maxDepth(TreeNode node){\r\n        if(node == null){\r\n            return 0;\r\n        }\r\n        return 1 + Math.max(maxDepth(node.left), maxDepth(node.right));\r\n    }\r\n    public int minDepth(TreeNode node){\r\n        if(node == null){\r\n            return 0;\r\n        }\r\n        if(node.left == null && node.right == null){\r\n            return 1;\r\n        }\r\n        if(node.left != null && node.right == null){\r\n            return 1+minDepth(node.left);\r\n        }\r\n        if(node.right != null && node.left == null){\r\n            return 1+ minDepth(node.right);\r\n        }\r\n        \r\n        return 1+ Math.min(minDepth(node.left), minDepth(node.right));\r\n    }\r\n}","compare_result":null,"title_slug":"balanced-binary-tree","has_notes":false,"flag_type":1}